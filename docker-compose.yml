services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    command: bash /code/scripts/init-script.sh
    volumes:
      - ./:/code:rw
      - ./logs/api:/code/logs:rw
      - ./ai_services_api/services/search/models:/code/ai_services_api/services/search/models:rw
      - ./cache:/code/cache:rw
      - ./scripts/init-script.sh:/code/scripts/init-script.sh:ro
      - type: tmpfs
        target: /code/.initialization_complete
        tmpfs:
          size: 1M
          mode: 0777
    environment: 
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - DEBUG=True
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - POSTGRES_HOST=167.86.85.127
      - POSTGRES_DB=${POSTGRES_DB:-aphrc}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-p0stgres}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password123456789!}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - DOCKER_ENV=true
      - TRANSFORMERS_CACHE=/code/cache
      - HF_HOME=/code/cache
      - MODEL_PATH=/code/models/search
      - BASE_DIR=/code
    user: "${UID:-1000}:${GID:-1001}"
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - aphrc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 50s
      timeout: 10s
      retries: 3
      start_period: 100s
    env_file:
      - .env
    restart: "no"

  redis:
    image: redis:latest
    container_name: redis-standalone
    hostname: redis
    restart: always
    networks:
      - aphrc-network
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./logs/redis:/var/log/redis:rw
    command: redis-server --appendonly yes --loglevel notice --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      - REDIS_MAXMEMORY=256mb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  neo4j:
    image: neo4j:5.12.0
    container_name: neo4j
    user: "${UID:-1000}:${GID:-1001}"
    hostname: neo4j
    restart: always
    networks:
      - aphrc-network
    ports:
      - "7474:7474" 
      - "7687:7687"
    environment:
      NEO4J_AUTH: "${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password123456789!}"
      NEO4J_server_memory_pagecache_size: 512M
      NEO4J_server_memory_heap_initial__size: 512M
      NEO4J_server_memory_heap_max__size: 512M
      NEO4J_dbms_transaction_timeout: 300s
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*"
      NEO4J_dbms_directories_logs: /logs
    volumes:
      - neo4j-data:/data
      - ./logs/neo4j:/logs:rw
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 300s

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    networks:
      - aphrc-network
    environment:
      POSTGRES_DB: "${POSTGRES_DB:-aphrc}"
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-p0stgres}"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    networks:
      - aphrc-network
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_EMAIL:-admin@admin.com}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_PASSWORD:-admin}"
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy

  # Airflow Services (Commented out for development)
  # To enable, remove the "#" from the following sections
  
  #airflow-webserver:
  #  build:
  #    context: .
  #    dockerfile: Dockerfile.airflow
  #  user: "${AIRFLOW_UID:-50000}:0"
  #  command: bash -c "
  #    airflow db migrate &&
  #    airflow db check &&
  #    airflow connections create-default-connections &&
  #    airflow users create --username admin --firstname Admin --lastname User --role Admin --email briankimu97@gmail.com --password admin &&
  #    airflow webserver"
  #  depends_on:
  #    postgres:
  #      condition: service_healthy
  #    redis:
  #      condition: service_healthy
  #  environment:
  #    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-p0stgres}@postgres:5432/${POSTGRES_DB:-aphrc}
  #    - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-p0stgres}@postgres:5432/${POSTGRES_DB:-aphrc}
  #    - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/1
  #    - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
  #    - AIRFLOW__CORE__LOAD_EXAMPLES=False
  #    - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY:-your-secret-key}
  #    - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-''}
  #    - REDIS_HOST=redis
  #    - REDIS_PORT=6379
  #    - NEO4J_URI=bolt://neo4j:7687
  #    - NEO4J_USER=${NEO4J_USER:-neo4j}
  #    - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password123456789!}
  #    - WEBSITE_URL=${WEBSITE_URL:-https://aphrc.org}
  #    - GEMINI_API_KEY=${GEMINI_API_KEY}
  #  volumes:
  #    - ./dags:/opt/airflow/dags
  #    - ./logs/airflow:/opt/airflow/logs
  #    - ./plugins:/opt/airflow/plugins
  #    - ./src:/opt/airflow/src
  #    - ./data:/opt/airflow/data
  #  ports:
  #    - "8080:8080"
  #  networks:
  #    - aphrc-network
  #  healthcheck:
  #    test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
  #    interval: 50s
  #    timeout: 10s
  #    retries: 5
  #    start_period: 100s
  #  restart: unless-stopped

  #airflow-scheduler:
  #  build:
  #    context: .
  #    dockerfile: Dockerfile.airflow
  #  user: "${AIRFLOW_UID:-50000}:0"
  #  command: airflow scheduler
  #  depends_on:
  #    airflow-webserver:
  #      condition: service_healthy
  #  environment:
  #    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-p0stgres}@postgres:5432/${POSTGRES_DB:-aphrc}
  #    - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-p0stgres}@postgres:5432/${POSTGRES_DB:-aphrc}
  #    - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/1
  #    - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
  #    - AIRFLOW__CORE__LOAD_EXAMPLES=False
  #    - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-''}
  #  volumes:
  #    - ./dags:/opt/airflow/dags
  #    - ./logs/airflow:/opt/airflow/logs
  #    - ./plugins:/opt/airflow/plugins
  #    - ./src:/opt/airflow/src
  #    - ./data:/opt/airflow/data
  #  networks:
  #    - aphrc-network
  #  restart: unless-stopped

  #airflow-worker:
  #  build:
  #    context: .
  #    dockerfile: Dockerfile.airflow
  #  user: "${AIRFLOW_UID:-50000}:0"
  #  command: airflow celery worker
  #  depends_on:
  #    airflow-webserver:
  #      condition: service_healthy
  #  environment:
  #    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-p0stgres}@postgres:5432/${POSTGRES_DB:-aphrc}
  #    - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-p0stgres}@postgres:5432/${POSTGRES_DB:-aphrc}
  #    - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/1
  #    - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
  #    - AIRFLOW__CORE__LOAD_EXAMPLES=False
  #    - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-''}
  #  volumes:
  #    - ./dags:/opt/airflow/dags
  #    - ./logs/airflow:/opt/airflow/logs
  #    - ./plugins:/opt/airflow/plugins
  #    - ./src:/opt/airflow/src
  #    - ./data:/opt/airflow/data
  #  networks:
  #    - aphrc-network
  #  restart: unless-stopped

networks:
  aphrc-network:
    name: aphrc-network
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  neo4j-data:
  #airflow-logs: